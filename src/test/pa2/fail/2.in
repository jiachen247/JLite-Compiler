/* Failure case for type check */

class Main {
    Void main(){
        return ;
    }
}

class Dummy {
    Int i;
    Bool b;
    String s;

    Int test(Int a) {
        return 2;
    }
    Int retInt() {
        return i;
    }

    Bool returnBool() {
        return b;
    }

    String retString() {
        return s;
    }
}

class TestStatements {
    Blah stmts() {
        Int x;
        String s;
        Bool b;
        Dummy d;

        while(1) {
            x = x + 1;
        }

        // If else should have the same type for if and else block
        if (1 + 1 > 2) {
            d.retInt();
        } else {
            d.retBool();
        }

        // Println
        println(d);
        println(1);

        // Readline
        readln(d);

        // return dummy when return type is void
        return d;

        // Invalid Property Assignment
        d.i = true;
        x = "string";
        d = true;
        d.z = "1";
    }
}

class TestExpressions {
    Void test() {
        Int x;
        String s;
        Bool b;
        Dummy d;

        d = new Dummy();

        // Illegal Unary Expressions
        x = -(1 > 2);
        b = !(1 + 2);

        // Illegal Binary Expressions
        s = "pwd" + 1;
        s = "123456" - 1;
        s = s * s;

        // Illegal new expression
        d = new UndefinedClass();
        x = new Dummy();

        // Undefined variables
        x = undefinedVariable;
        x = undefinedVariable.x;
        x = d.undefinedVariable;
        x = d.undefinedMethod();
        x = (test())();

        // Test call expressions
        x = d.test(undefined);
        x = d.test(1, 2, 3);
    }
}
