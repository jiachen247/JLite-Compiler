Successfully parsed program! :-)

class Main {
	Void main() {
		Return 1;
	}
}

class TestA {
	Int a;
	Int b;
	Int c;

}

class TestB {
	Int a;
	Int b;
	Int c;

}

class TestB1 {
	Int a;
	Int b;
	Int c;

}

class TestC {

	Int method1(Int a, Int b) {
		Return 1;
	}
}

class TestD {

	Void methodOverloaded(Int a, Int b, Int c) {
		Return false;
	}
	Bool methodOverloaded(Int a, Int b) {
		Return true;
	}
	Int methodOverloaded(Int a) {
		Return 1;
	}
	Int methodOverloaded() {
		Return 0;
	}
	Int method2(Int a, Int b) {
		Return 1;
	}
	Int method1(Int a, Int b) {
		Return 1;
	}
}

class Edge {
	Int a;

	Int b(Int b) {
		Return 1;
	}
	Int method2() {
		Int a;
		Return 1;
	}
	Int a(Int a) {
		Return 1;
	}
}


[1/2] DistinctNameChecker: PASS
key: TestA value:ClassDescriptor{cname='TestA', fields={a=BasicType{name='Int'}, b=BasicType{name='Int'}, c=BasicType{name='Int'}}, methods={}}
key: Main value:ClassDescriptor{cname='Main', fields={}, methods={main=FunctionType{parametersType=[], returnType=BasicType{name='Void'}}}}
key: TestB1 value:ClassDescriptor{cname='TestB1', fields={a=BasicType{name='Int'}, b=BasicType{name='Int'}, c=BasicType{name='Int'}}, methods={}}
key: TestD value:ClassDescriptor{cname='TestD', fields={}, methods={methodOverloaded=FunctionType{parametersType=[], returnType=BasicType{name='Int'}}, method1=FunctionType{parametersType=[BasicType{name='Int'}, BasicType{name='Int'}], returnType=BasicType{name='Int'}}, method2=FunctionType{parametersType=[BasicType{name='Int'}, BasicType{name='Int'}], returnType=BasicType{name='Int'}}}}
key: Edge value:ClassDescriptor{cname='Edge', fields={a=BasicType{name='Int'}}, methods={a=FunctionType{parametersType=[BasicType{name='Int'}], returnType=BasicType{name='Int'}}, b=FunctionType{parametersType=[BasicType{name='Int'}], returnType=BasicType{name='Int'}}, method2=FunctionType{parametersType=[], returnType=BasicType{name='Int'}}}}
key: TestC value:ClassDescriptor{cname='TestC', fields={}, methods={method1=FunctionType{parametersType=[BasicType{name='Int'}, BasicType{name='Int'}], returnType=BasicType{name='Int'}}}}
key: TestB value:ClassDescriptor{cname='TestB', fields={a=BasicType{name='Int'}, b=BasicType{name='Int'}, c=BasicType{name='Int'}}, methods={}}
[2/2] TypeChecker: PASS
